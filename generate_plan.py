import argparse
import re

def infer_project_name(idea: str) -> str:
    """
    A simple function to infer a project name from the idea string.
    Looks for phrases like 'build a', 'create a', 'an app for'.
    """
    # Simple patterns to find a name
    patterns = [
        r"(?:build|create|make)\s+(?:a|an)\s+([\w\s]+?)(?:\s+that|\s+for|\.|$)",
        r"an\s+app\s+for\s+([\w\s]+?)(?:\.|$)",
    ]
    
    for pattern in patterns:
        match = re.search(pattern, idea, re.IGNORECASE)
        if match:
            # Clean up and title case the extracted name
            name = match.group(1).strip().title()
            return name
            
    return "My New Project" # Fallback name

def generate_project_plan(idea: str, output_filename: str = "PROJECT_PLAN.md"):
    """
    Generates a project plan markdown file from a user's idea.
    
    Args:
        idea: The string containing the user's project idea.
        output_filename: The name of the file to save the plan to.
    """
    
    project_name = infer_project_name(idea)
    
    plan_template = f"""
# Project Plan: {project_name}

## 1. Executive Summary

This document outlines the project plan for "{project_name}". The project is based on the initial user idea: 
> "{idea}"
The goal is to translate this idea into a functional application by following a structured, AI-assisted development process.

## 2. Project Vision & Core Goals

*   **Vision:** To successfully create a functional and useful "{project_name}" application that meets the core needs described in the user's initial concept.
*   **Core Problem Solved:** This project aims to address the central challenge or opportunity presented in the idea, providing a clear solution.
*   **Measurable Goals (Initial):**
    *   Develop a Minimum Viable Product (MVP) that demonstrates the core functionality.
    *   Ensure the application is easy to use and intuitive.
    *   Lay a stable foundation for future features and enhancements.

## 3. Functional Requirements (Initial High-Level)

Based on the initial idea, the following high-level functional areas are anticipated. These will be broken down into detailed user stories.

*   **User Management:** (If applicable) A system for users to register and sign in.
*   **Core Functionality:** The primary features that define "{project_name}".
*   **User Interface:** A clean and effective interface for users to interact with the application.

---
*This plan was auto-generated by the AI Development Agent.*
"""
    
    try:
        with open(output_filename, "w") as f:
            f.write(plan_template.strip())
        print(f"✅ Project plan created successfully at '{output_filename}'")
    except IOError as e:
        print(f"❌ Error: Could not write to file '{output_filename}'. Reason: {e}")

def main():
    """Main function to parse arguments and run the script."""
    parser = argparse.ArgumentParser(
        description="AI Agent to generate a project plan from an idea."
    )
    parser.add_argument(
        "idea", 
        type=str, 
        help="A string containing your project idea, enclosed in quotes."
    )
    
    args = parser.parse_args()
    generate_project_plan(args.idea)

if __name__ == "__main__":
    main()
